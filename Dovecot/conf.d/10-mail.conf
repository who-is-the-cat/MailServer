##
## Пути к ящикам и пространства имен
##
 
# Расположение почтовых ящиков. По умолчанию эта переменная не задана,
# поэтому Dovecot пытается найти почтовые ящики автоматически.
# Это не будет работать, если пользователь не имеет почтового ящика,
# поэтому лучше задать этот параметр.
#
# Если вы используете mbox, то одного пути к файлам почтового ящика
# (например, /var/mail/%u) не будет достаточно. Так же вы должны
# предоставить Dovecot,у, где будут храниться другие почтовые ящики.
# Это называется "root mail directory (корневая директория почты)" и она должна
# быть задана первой в параметре mail_location.
#
#  Так же вы можете использовать следующие переменные:
#
#   %u - имя пользователя
#   %n - имя польльзователя, только без домена
#   %d - имя домена (пусто, если домен не указан)
#   %h - домашняя директория
#
# Полный список смотрите здесь - <doc/wiki/Variables.txt>. Примеры:
#
#   mail_location = maildir:~/Maildir
#   mail_location = mbox:~/mail:INBOX=/var/mail/%u
#   mail_location = mbox:/var/mail/%d/%1n/%n:INDEX=/var/indexes/%d/%1n/%n
#
# <doc/wiki/MailLocation.txt>
#
mail_location = maildir:~/Maildir 
 
# Если вы хотите задать несколько местоположений почтовых ящиков или
# хотите изменить пространства имен, вы можете сделать это определяя
# секции пространств имен.
#
# Вы можете создать приватные, разделяемые и общие пространства имен.
# Приватные пространства имен используются для личных писем пользователй.
# К разделяемым пространствам могут иметь доступ другие пользователи.
# Общие пространства разделяется между почтовыми ящиками, которые
# управляются админами. Если вы создаете разделяемые или общие 
# пространства, то вам понадобится ACL плагин (для управляения правами
# доступа), в противном случае пользователи будут иметь доступ ко всем
# разделяемым почтовым ящикам, только если у них есть такая возможность
# на уровне прав доступа файловой системы.
#
# Запомните: Если вы добавляете какие-либо пространства имен, то пространства
# имен по умолчанию должны быть добавлены обязательно, то есть значение
# mail_location ничего не значит, пока в пространстве имен не задан параметр
# location. По умолчанию пространство имен не имеет префикса.
#namespace {
  # Тип пространства имен: private, shared или public
  #type = private
 
  # Используйте здесь обратный слэш в роли разделителя. Вы должны
  # использовать такой разделитель для всех пространств имен или
  # могут возникнуть проблемы с некоторыми клиентами.
  # Зависит от формата пользовательского ящика.
  #separator = 
 
  # Для доступа к пространству имен требуется указать префикс. Он должен
  # быть разным для каждого пространства имен. Например, "Public/".
  #prefix = 
 
  # Физическое местоположение почтового ящика. Формат такой же как и
  # у параметра mail_location. Если не задан, то значение берется
  # из mail_location.
  #location =
 
  # Может быть только один ящик для приема сообщений и этот параметр
  # определяет у какого пространства имен будет этот ящик.
  #inbox = no
 
  # If namespace is hidden, it's not advertised to clients via NAMESPACE
  # extension. You'll most likely also want to set list=no. This is mostly
  # useful when converting from another server with different namespaces which
  # you want to deprecate but still keep working. For example you can create
  # hidden namespaces with prefixes "~/mail/", "~%u/mail/" and "mail/".
  #hidden = no
 
  # Show the mailboxes under this namespace with LIST command. This makes the
  # namespace visible for clients that don't support NAMESPACE extension.
  # "children" value lists child mailboxes, but hides the namespace prefix.
  #list = yes
 
  # Namespace handles its own subscriptions. If set to "no", the parent
  # namespace handles them (empty prefix should always have this as "yes")
  #subscriptions = yes
#}
 
# Пример конфигурации разделяемого пространства имен
#namespace {
  #type = shared
  #separator = /
 
  # Почтовые ящики отображаются так - "shared/user@domain/"
  # %%n, %%d и %%u преобразуются в конечного пользователя.
  #prefix = shared/%%u/
 
  # Местонахождение писем для других почтовых ящиков. Учтите,
  # что %variables и ~/ преобразуются в данные, связанные
  # с подключенным пользователем. %%n, %%d, %%u и %%h
  # преобразуются в данные, связанные с конечным пользователем.
  #location = maildir:%%h/Maildir:INDEX=~/Maildir/shared/%%u
 
  # Использовать пространство имен по умолчанию для подписчиков.
  #subscriptions = no
 
  # Показывать только пространство имен shared/, если выводится
  # список разделяемых почтовых ящиков.
  #list = children
#}
 
# Системные пользователь и группа, которые используются для доступа
# к почтовым ящикам. Если вы используюте различных пользователей
# и различные группы, то используя колонки uid или gid из БД пользователей,
# можно переопределить эти значения. Вы можете использовать здесь
# имена или числовые идентификаторы. <doc/wiki/UserIds.txt>
mail_uid = mailnull
mail_gid = mailnull
 
# Группа, используемая для привилигированных операций. На данный момент
# это используется только с INBOX, когда не удается его создание или
# не получается блокировка (dotlock). Обычно используется группа "mail" для
# доступа к /var/mail.
mail_privileged_group = mail
 
# Предоставить доступ этим группам к процессу, обрабатывающему письма.
# В основном это используется для разрешения доступа к разделяемым
# пространствам имен. Учтите, что это может быть опасно, если пользователи
# могут создавать символические ссылки (например, если здесь указана
# группа "mail", то ln -s /var/mail ~/mail/var позволит удалять пользователю
# чужие почтовые ящики, или ln -s /secret/shared/box ~/mail/mybox позволит
# читать их).
#mail_access_groups =
 
# Предоставить полный доступ к ФС клиентам. В этом случае не происходит
# каких-либо проверок доступа, только проверки на уровне прав доступа ФС.
# Это работает с Maildir и mbox, разрешая указывать префикс к имени
# ящика, например, /path/ или ~/user/.
mail_full_filesystem_access = no
 
##
## Процесс, работающий с письмами
##
 
# Не использовать системный вызов mmap(). Такое поведение
# может потребоваться, если индексы хранятся на разделяемой
# ФС (например, NFS или кластерная ФС).
mmap_disable = no
 
# Использовать флаг O_EXCL, когда создаются файлы блокировки (dotlock).
# NFS поддерживает O_EXCL, начиная с версии 3, так что на сегодняший
# день данный параметр не создаст каких-либо проблем.
dotlock_use_excl = yes
 
# Когда использовать системные вызовыfsync() или fdatasync():
#   optimized (по умолчанию): при необходимости, чтобы не потерять важные данные
#   always: полезна, например для NFS, где запись откладывается (задерживается)
#   never: вообще не использовать (лучшая производительность, но любой сбой
#     может привести к потери данных)
mail_fsync = optimized
 
# Для хранения писем используется NFS. Установите этот параметр в 'yes',
# чтобы Dovecot при необходимости сбрасывал кэши NFS. Если вы
# используете локальную ФС для хранения, то изменение этого параметра
# не требуется.
mail_nfs_storage = no
 
# Индексы тоже хранятся на NFS. Этот параметр требует
# mmap_disable=yes и fsync_disable=no.
#mail_nfs_index = no
 
# Метод блокировки для индексов. Возможные значения fcntl, flock и dotlock.
# В методе блокировки dotlock используются некоторые трюки, 
# что может увеличить нагрузку на подсистему ввода/вывода диска.
# Пользователям NFS следует знать: что flock в данном случае не работает,
# не забывайте изменять mmap_disable.
lock_method = fcntl
 
# Директория, в которой LDA/LMTP временно сохраняет входящие сообщения
# размером более 128 Кб.
mail_temp_dir = /var/tmp
 
# Допустимые дапазоны UID для пользователей, по умолчанию от 500 и выше.
# То есть никто не сможет зайти на сервер с идентификатором ниже/выше
# указанного. Учтите, что руту доступ запрещен на уровне кода.
first_valid_uid = 26
#last_valid_uid = 0
 
# Тоже самое, только для групп. Если у пользователя основная группа
# с идентификатором, выходящим из данного диапазона, то в доступе
# такому пользователю будет отказано.
first_valid_gid = 26
#last_valid_gid = 0
 
# Максимальная длина для имени ключевого слова письма.
# Может пригодится при создании новых ключевых слов.
#mail_max_keyword_length = 50
 
# Список директорий, разделенный двоеточиями, в которые можно 
# будет chroot,иться процессу (например, если указать здесь /var/mail,
# то возможен будет chroot в поддиректории). Этот параметр не влияет
# на login_chroot, mail_chroot or auth chroot. Если параметр не задан,
# то "/./" в домашних директориях будет игнорироваться.
# Осторожно: Никогда не указывайте здесь директории, к которым
# имеют доступ локальные пользователи. Этим правилом можно
# пренибреч, только если у пользователей нет доступа к шелу.
# <doc/wiki/Chrooting.txt>
#valid_chroot_dirs = 
 
# Основная директория для chroot,а процесса. Этот параметр может быть
# изменен для определенных пользователей, указав в пути к 
# домашней директории /./ (например, /home/./user chroot в /home).
# Следует знать, что в основном chroot процесса не требуется.
# Dovecot не позволит пользователям получить доступ к файлам
# за пределами домашней директории в любом случае. 
# <doc/wiki/Chrooting.txt>
#mail_chroot = 
 
# Путь к UNIX сокету сервера аутентификации.
# Сокет используется imap (for shared users) и lda.
auth_socket_path = /var/run/dovecot/auth-userdb
 
# Директория, в которой находятся плагины.
mail_plugin_dir = /usr/local/lib/dovecot
 
# Список плагинов, разделенный пробелами, которые должны
# быть загружены. Плагины специфичные для IMAP, LDA  и т.п.
# включаются в других (собственных) файлах конфигурации.
mail_plugins = $mail_plugins quota
 
##
## Оптимизация работы с почтовыми ящиками
##
 
# Минимальное количество писем в почтовом ящике перед обновлением
# файла кеша. Благодаря этому параметру Dovecot будет делать меньше 
# операций записи на диск, но количество операций чтения возрастет.
#mail_cache_min_mail_count = 0
 
# Если получена команда IDLE, то почтовый ящик будет периодически
# проверяться на предмет получения новых писем или других изменений.
# Этот параметр определяет минимальное количество секунд перед
# проверкой. Dovecot может использовать dnotify, inotify и kqueue, чтобы
# узнать об изменениях.
#mailbox_idle_check_interval = 30 secs
 
# Сохранять текст письма с CR+LF в конце вместо LF. Это может уменьшить
# нанагрузку на проц при работе с некоторыми письмами, особенно если
# используется системный вызов sendfile(). Но увеличиться нагрузка
# на подсистему ввода/вывода, поэтому прироста в производительности
# может и не быть, а может быть она вообще снизится. Так же следует знать,
# что использование такой возможности может вызвать проблемы с другим
# програмным обеспечением, работающем в ящиках.
#mail_save_crlf = no
 
##
## Параметры Maildir
##
 
# По умолчанию для команды LIST выводится все записи в почтовом ящике,
# начинающиеся с точки. Включение этой опции заставляет Dovecot возвразать
# только список директорий.  Для каждого объекта в почтовом ящике
# вызывается системный вызов stat(), что нагружает подсистему ввода/вывода.
#maildir_stat_dirs = no
 
# При копировании письма создавать жесткую ссылку, если это возможно.
# В таком случае производительность возрастет без каких-либо последствий.
maildir_copy_with_hardlinks = yes
 
# Если Dovecot единственной MUA, который имеет доступ к почтовым ящикам,
# то возможно сканировать директорию cur/, только когда изменен mtime
# или когда не удается найти письма.
#maildir_very_dirty_syncs = no
 
##
## Параметры mbox
##
 
# Системный вызов, используемый для блокировок при просмотре mbox.
# Доступно четыре вызова:
#    dotlock: создавать файл <mailbox>.lock. Это старый способ, но безопасный
#      для NFS. Если вы используете директорию /var/mail, то пользователи
#      должны иметь права на запись в нее.
#    dotlock_try: тоже самое, что и dotlock, но если блокировка не удастся,
#      из-за прав доступа или недостаточного количества места на диске, то
#      то просто проигнорировать это.
#    fcntl: использовать, если возможно. Работает с NFS, если работает 
#      демон lockd.
#    flock: данный вызов есть не во всех системах. Не работает с NFS.
#    lockf: данный вызов есть не во всех системах. Не работает с NFS.
# Вы можете использовать несколько методов, если только из-за этого
# не возникнет проблем с другим софтом (MTA/MUA), то есть другой софт
# должен поддерживать данные методы. Некоторые ОС не позволяют 
# использовать разные блокировки одновременно.
#mbox_read_locks = fcntl
#mbox_write_locks = dotlock fcntl
 
# Максимальное кол-во секунд выжидаемое для заблокированного файла
# перед отменой.
#mbox_lock_timeout = 5 mins
 
# Пересоздать блокировку на файл, если почтовый ящик не был изменен
# в течении этого времени (указывать в секундах).
#mbox_dotlock_change_timeout = 2 mins
 
# Когда содержимое mbox изменяется, необходимо полностью перечитать 
# его. Если mbox очень большой, то это может занять много времени. Так
# как изменение чаще всего происходит из-за прихода нового письма, то
# было бы гораздо прочитать только новые письма. Если этот параметр
# включен, то Dovecot делает это, но при необходимости перечитывает mbox.
# Параметр следует отключить, если другие MUA могут изменить флаги
# сообщний, о чем Dovecot соответственно не будет знать. Так же следует
# знать, что сброс кэшей выполняется с командами SELECT, EXAMINE,
# EXPUNGE и CHECK.
#mbox_dirty_syncs = yes
 
# Аналогично mbox_dirty_syncs, но не будет осуществляться сброс кэшей,
# даже если выполняются команды SELECT, EXAMINE, EXPUNGE и CHECK.
# Если этот параметр включен, то параметр mbox_dirty_syncs игнорируется.
#mbox_very_dirty_syncs = no
 
# Задерживать запись заголовков mbox, до тех пор пока происходит сброс
# кэшей (команды EXPUNGE и CHECK, после чего файл закрывается).
# Такое поведение может оказаться полезным при использовании протокола
# POP3, когда пользователи пытаются удалить все письма. С другой стороны,
# плохо, что другие MUA не видят изменений в ящике.
#mbox_lazy_writes = yes
 
# Не писать индекс, пока ящик mbox не наберет заданный здесь размер в
# килобайтах. Если индекс уже был создан, то он будет использоваться, но
# не будет обновляться, если размер ящика меньше заданного.
#mbox_min_index_size = 0
 
##
## Параметры mdbox
##
 
# # Максимальный размер файла dbox, перед ротацией.
#mdbox_rotate_size = 2M
 
# Максимальное время жизни dbox файла перед ротацией. Обычно задается
# в днях. Дни считаются с полуночи, поэтому 1d = сегодня, 2d = вчера и т.д.
# Если 0, то такая проверка отключена.
#mdbox_rotate_interval = 1d
 
# При создании новых файлов mdbox резервировать место для них
# размером в mdbox_rotate_size. Этот функционал работает только на Linux
# и на определенных файловых системах (ext4, xfs).
#mdbox_preallocate_space = no
 
##
## Параметры для прикрепляемых файлов (вложений).
##
 
# sdbox и mdbox могут сохранять вложения во внешние файлы.
# На данный момент другие форматы почтовых ящиков не поддерживают
# данный функционал.
# sdbox and mdbox support saving mail attachments to external files, which
# also allows single instance storage for them. Other backends don't support
# this for now.
 
# Предупреждение: Этот функционал до конца не отлажен, поэтому
# используйте его на свой страх и риск.
 
# Директории, в которой будут сохраняться вложения. Если не задано, то
# данный функционал отключен.
#mail_attachment_dir =
 
# Вложения которые меньше указанного здесь размера не будут сохранены
# во внешние файлы. Возможно написать плагин, который будет определять
# по каким-то другим критериям сохранять файл во внешнее хранилище
# или нет.
#mail_attachment_min_size = 128k
 
# Backend фаловой системы, который используется для сохранения вложений:
#  posix : No SiS done by Dovecot (but this might help FS's own deduplication)
#  sis posix : SiS with immediate byte-by-byte comparison during saving
#  sis-queue posix : SiS with delayed comparison and deduplication
#mail_attachment_fs = sis posix
 
# Хэш функция, используемая для генерации имен файлов вложений.
# Вы можете указать здесь обычный текст и следующие переменные: %{md4},
# %{md5}, %{sha1}, %{sha256}, %{sha512}, %{size}. Результат переменных
# может быть ограничен, например так %{sha256:80} - вернет первые 80 бит.
mail_attachment_hash = %{sha1}